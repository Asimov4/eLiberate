{"version":3,"sources":["../src/index.js"],"names":["unwantedArgvs","addModuleCommands","builder","module","moduleName","Object","keys","commands","forEach","command","commandName","name","description","commandWrapper","pluginName","then","rawArgv","process","argv","slice","filteredArgv","api","cwd","potentialPromise","runCommand","e","_commandErrorHandler","catch","console","error","preAPI","config","getConfig","plugins","Array","map","plugin","path","configPath","app","hooks","key","program","usage","yellow","version","alias","global","option","requiresArg","string","boolean","strict","epilogue","help","subYargs","showHelp","_","length"],"mappings":"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","file":"index.js","sourcesContent":["import './node-version';\nimport './nodemiral';\nimport checkUpdates from './updates';\nimport modules, { loadPlugins, locatePluginDir } from './load-plugins';\nimport { registerHook } from './hooks';\nimport pkg from '../package.json';\nimport yargs from 'yargs';\nimport chalk from 'chalk';\nimport MupAPI from './plugin-api';\nimport { filterArgv } from './utils';\n\nconst unwantedArgvs = ['_', '$0', 'settings', 'config', 'verbose', 'show-hook-names', 'help', 'servers'];\n\nfunction addModuleCommands(builder, module, moduleName) {\n  Object.keys(module.commands).forEach(commandName => {\n    let command = module.commands[commandName];\n    command.builder = command.builder || {};\n\n    builder.command(\n      command.name || commandName,\n      command.description,\n      command.builder,\n      commandWrapper(moduleName, commandName)\n    );\n  });\n}\n\nfunction commandWrapper(pluginName, commandName) {\n  return function() {\n    checkUpdates()\n      .then(() => {\n        const rawArgv = process.argv.slice(2);\n        const filteredArgv = filterArgv(rawArgv, yargs.argv, unwantedArgvs);\n        const api = new MupAPI(process.cwd(), filteredArgv, yargs.argv);\n        let potentialPromise;\n\n        try {\n          potentialPromise = api.runCommand(`${pluginName}.${commandName}`);\n        } catch (e) {\n          api._commandErrorHandler(e);\n        }\n\n        if (potentialPromise && typeof potentialPromise.then === 'function') {\n          potentialPromise.catch(api._commandErrorHandler);\n        }\n      })\n      .catch(e => {\n        console.error(e);\n      });\n  };\n}\n\n// Load config before creating commands\nconst preAPI = new MupAPI(process.cwd(), process.argv, yargs.argv);\nconst config = preAPI.getConfig(false);\n\n// Load plugins\nif (config.plugins instanceof Array) {\n  loadPlugins(\n    config.plugins.map(plugin => {\n      return {\n        name: plugin,\n        path: locatePluginDir(plugin, preAPI.configPath, preAPI.app ? preAPI.app.path : '')\n      };\n    })\n  );\n}\n\n// Load hooks\nif (config.hooks) {\n  Object.keys(config.hooks).forEach(key => {\n    registerHook(key, config.hooks[key]);\n  });\n}\n\nlet program = yargs\n  .usage(`\\nUsage: ${chalk.yellow('mup')} <command> [args]`)\n  .version(pkg.version)\n  .alias('version', 'V')\n  .global('version', false)\n  .option('settings', {\n    description: 'Path to Meteor settings file',\n    requiresArg: true,\n    string: true\n  })\n  .option('config', {\n    description: 'Path to mup.js config file',\n    requiresArg: true,\n    string: true\n  })\n  .option('servers', {\n    description: 'Comma separated list of servers to use',\n    requiresArg: true,\n    string: true\n  })\n  .option('verbose', {\n    description: 'Print output from build and server scripts',\n    boolean: true\n  })\n  .option('show-hook-names', {\n    description: 'Prints names of the available hooks as the command runs',\n    boolean: true\n  })\n  .strict(true)\n  .alias('help', 'h')\n  .epilogue(\n    'For more information, read the docs at http://meteor-up.com/docs.html'\n  )\n  .help('help');\n\nObject.keys(modules).forEach(moduleName => {\n  if (moduleName !== 'default' && modules[moduleName].commands) {\n    yargs.command(\n      moduleName,\n      modules[moduleName].description,\n      subYargs => {\n        addModuleCommands(subYargs, modules[moduleName], moduleName);\n      },\n      () => {\n        yargs.showHelp('log');\n      }\n    );\n  } else if (moduleName === 'default') {\n    addModuleCommands(yargs, modules[moduleName], moduleName);\n  }\n});\n\nprogram = program.argv;\n\nif (program._.length === 0) {\n  yargs.showHelp();\n}\n"]}