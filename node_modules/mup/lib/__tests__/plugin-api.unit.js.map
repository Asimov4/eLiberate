{"version":3,"sources":["../../src/__tests__/plugin-api.unit.js"],"names":["validate","describe","api","base","join","__dirname","filteredArgs","program","verbose","beforeEach","it","_api","config","configPath","to","include","equal","has","property","resolvePath","be","a","runTaskList","getDockerLogs","runSSHCommand","getArgs","getBasePath","getVerbose","getOptions","fsStub","configStub","stub","callsFake","toString","meteor","path","afterEach","restore","hasMeteorPackage","errors","validatorStub","totalConsoleOutput","consoleStub","returns","console","text","validateConfig","contain","splice","length","expected","app","type","docker","image","result","_normalizeConfig","deep","newConfig","servers","two","setConfig","getConfig","commandCalled","preHookCalled","postHookCalled","method","handler","after","runCommand","catch","cb","then","log","e","sessions","getSessions","have","_loadSessions","keys","_pickSessions"],"mappings":"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","file":"plugin-api.unit.js","sourcesContent":["import { expect } from 'chai';\nimport PluginAPI from '../plugin-api';\nimport path from 'path';\nimport sinon from 'sinon';\nimport fs from 'fs';\nimport * as validate from '../validate';\nimport { commands } from '../commands';\nimport { hooks } from '../hooks';\n\ndescribe('PluginAPI', () => {\n  let api;\n  const base = path.join(__dirname, '../../tests/fixtures/project-unit-tests');\n  const filteredArgs = ['--tail'];\n  const program = {\n    verbose: true\n  };\n\n  beforeEach(() => {\n    api = new PluginAPI(base, filteredArgs, program);\n  });\n\n  describe('configPath', () => {\n    it('should prefer --config option', () => {\n      const _api = new PluginAPI(base, filteredArgs, { config: '~/project2/.deploy/mup.js' });\n\n      expect(_api.configPath).to.include('project2');\n    });\n\n    it('should fallback to base', () => {\n      expect(api.configPath).to.equal(path.join(base, 'mup.js'));\n    });\n  });\n\n  describe('base', () => {\n    it('should prefer config path', () => {\n      const _api = new PluginAPI(base, filteredArgs, { config: '~/project2/.deploy/mup.js' });\n      expect(_api.base).to.equal('~/project2/.deploy');\n    });\n\n    it('should fallback to given base', () => {\n      expect(api.base).to.equal(base);\n    });\n  });\n\n  describe('properties', () => {\n    it('should have \"program\"', () => {\n      expect(api).has.property('program');\n    });\n  });\n  describe('utils', () => {\n    it('should have resolvePath', () => {\n      expect(api.resolvePath).to.be.a('function');\n    });\n    it('should have runTaskList', () => {\n      expect(api.runTaskList).to.be.a('function');\n    });\n    it('should have getDockerLogs', () => {\n      expect(api.getDockerLogs).to.be.a('function');\n    });\n    it('should have runSSHCommand', () => {\n      expect(api.runSSHCommand).to.be.a('function');\n    });\n  });\n  describe('getArgs', () => {\n    it('should return args', () => {\n      expect(api.getArgs()).to.equal(filteredArgs);\n    });\n  });\n\n  describe('getBasePath', () => {\n    it('should return base', () => {\n      expect(api.getBasePath()).to.equal(base);\n    });\n  });\n\n  describe('getVerbose', () => {\n    it('should return verbose', () => {\n      expect(api.getVerbose()).to.equal(true);\n    });\n  });\n\n  describe('getOptions', () => {\n    it('should return options', () => {\n      expect(api.getOptions()).to.equal(program);\n    });\n  });\n\n  describe('hasMeteorPackage', () => {\n    let fsStub;\n    let configStub;\n\n    beforeEach(() => {\n      fsStub = sinon.stub(fs, 'readFileSync').callsFake(() => {\n        return {\n          toString() {\n            return `\n            package1@3\n            package2@3\n            #package3@3\n            `;\n          }\n        };\n      });\n\n      configStub = sinon.stub(api, 'getConfig').callsFake(() => {\n        return {\n          meteor: {\n            path: '../'\n          }\n        };\n      });\n    });\n\n    afterEach(() => {\n      fsStub.restore();\n      configStub.restore();\n    });\n\n    it('should return true if package is used', () => {\n      expect(api.hasMeteorPackage('package2')).to.equal(true);\n    });\n\n    it('should ignore commented out lines', () => {\n      expect(api.hasMeteorPackage('package3')).to.equal(false);\n    });\n\n    it('should return false if could not find app', () => {\n      fsStub.restore();\n      expect(api.hasMeteorPackage('package2')).to.equal(false);\n    });\n  });\n\n  describe('validateConfig', () => {\n    let errors = ['error1', 'error2'];\n    let validatorStub;\n    let totalConsoleOutput = '';\n    let consoleStub;\n    beforeEach(() => {\n      totalConsoleOutput = '';\n      validatorStub = sinon.stub(validate, 'default').returns(errors);\n      consoleStub = sinon.stub(console, 'log').callsFake((...text) => {\n        totalConsoleOutput += text.join(' ');\n      });\n    });\n\n    afterEach(() => {\n      validatorStub.restore();\n      consoleStub.restore();\n    });\n\n    it('should show validation errors', () => {\n      api.validateConfig(api.configPath);\n\n      expect(totalConsoleOutput).to.contain('- error1');\n      expect(totalConsoleOutput).to.contain('- error2');\n    });\n\n    it('should show nothing when config is valid', () => {\n      errors.splice(0, errors.length);\n\n      api.validateConfig(api.configPath);\n\n      expect(totalConsoleOutput).to.equal('');\n    });\n  });\n\n  describe('_normalizeConfig', () => {\n    it('should copy meteor object to app', () => {\n      const expected = { meteor: { path: '../' }, app: { type: 'meteor', path: '../', docker: { image: 'kadirahq/meteord' } } };\n      const config = { meteor: { path: '../' } };\n      const result = api._normalizeConfig(config);\n\n      expect(result).to.deep.equal(expected);\n    });\n  });\n\n  describe('setConfig', () => {\n    it('should update the old config', () => {\n      const newConfig = { servers: { two: 0 } };\n      api.setConfig(newConfig);\n\n      expect(api.getConfig()).to.deep.equal(newConfig);\n    });\n  });\n\n  describe('runCommand', () => {\n    let commandCalled = false;\n    let preHookCalled = false;\n    let postHookCalled = false;\n\n    beforeEach(() => {\n      hooks['pre.test.logs'] = [{\n        method() {\n          preHookCalled = true;\n        }\n      }];\n      hooks['post.test.logs'] = [{\n        method() {\n          postHookCalled = true;\n        }\n      }];\n\n      commands['test.logs'] = {\n        handler() {\n          commandCalled = true;\n        }\n      };\n\n      commandCalled = false;\n      preHookCalled = false;\n      postHookCalled = false;\n    });\n\n    after(() => {\n      delete hooks['pre.test.logs'];\n      delete hooks['post.test.logs'];\n      delete commands['test.logs'];\n    });\n\n    it('should throw if name is not provided', cb => {\n      api.runCommand().catch(() => {\n        cb();\n      });\n    });\n\n    it('should throw if unknown command', cb => {\n      api.runCommand('nonexistent.command').catch(() => {\n        cb();\n      });\n    });\n\n    it('should run command', cb => {\n      api.runCommand('test.logs').then(() => {\n        expect(commandCalled).to.equal(true);\n        cb();\n      });\n    });\n\n    it('should run hooks', cb => {\n      api.runCommand('test.logs').then(() => {\n        expect(preHookCalled).to.equal(true);\n        expect(postHookCalled).to.equal(true);\n        cb();\n      }).catch(e => {\n        console.log(e);\n      });\n    });\n  });\n\n  describe('getSessions', () => {\n    it('should return sessions for plugins', () => {\n      const sessions = api.getSessions(['meteor', 'mongo']);\n      expect(sessions).to.have.length(2);\n    });\n  });\n\n  describe('_loadSessions', () => {\n    it('should add sessions to this.sessions', () => {\n      api._loadSessions();\n      expect(api.sessions).to.have.keys('one', 'two');\n    });\n  });\n\n  describe('_pickSessions', () => {\n    it('should return sessions for each plugin', () => {\n      const result = api._pickSessions(['meteor', 'mongo']);\n      expect(result).to.have.keys('one', 'two');\n    });\n  });\n});\n"]}