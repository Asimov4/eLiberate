{"version":3,"sources":["../src/load-plugins.js"],"names":["locatePluginDir","loadPlugins","log","modules","bundledPlugins","readdirSync","__dirname","map","name","path","filter","isDirectoryMupModule","configPath","appPath","indexOf","configLocalPath","silent","mupLocal","require","resolve","e","appLocalPath","globalPath","plugins","module","plugin","code","console","failed","forEach","commands","Object","keys","key","hooks","validate","validators","entries","property","validator","prepareConfig","modulePath","moduleDir","statSync","isDirectory"],"mappings":"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","file":"load-plugins.js","sourcesContent":["import fs from 'fs';\nimport resolveFrom from 'resolve-from';\nimport globalModules from 'global-modules';\nimport { resolve, join } from 'path';\nimport registerCommand from './commands';\nimport { registerHook } from './hooks';\nimport { addPluginValidator } from './validate';\nimport { registerPreparer } from './prepare-config';\nimport path from 'path';\nimport debug from 'debug';\n\nconst log = debug('mup:plugin-loader');\n\nconst modules = {};\nexport default modules;\n\n// Load all folders in ./plugins as MUP modules.\n// The directory name is the module name.\nlet bundledPlugins = fs\n  .readdirSync(resolve(__dirname, 'plugins'))\n  .map(name => {\n    return { name, path: `./plugins/${name}` };\n  })\n  .filter(isDirectoryMupModule);\n\nloadPlugins(bundledPlugins);\n\nexport function locatePluginDir(name, configPath, appPath) {\n  log(`loading plugin ${name}`);\n\n  if (name.indexOf('.') === 0 || name.indexOf('/') === 0 || name.indexOf('~') === 0) {\n    log('plugin name is a path to the plugin');\n    return name;\n  }\n\n  const configLocalPath = resolveFrom.silent(configPath, name);\n  if (configLocalPath) {\n    log('plugin installed locally to config folder');\n    return configLocalPath;\n  }\n  try {\n    const mupLocal = require.resolve(name);\n    log('plugin installed locally with mup');\n    return mupLocal;\n  } catch (e) {\n    // Continues to next location to resolve from\n  }\n\n  const appLocalPath = resolveFrom.silent(appPath, name);\n  if (appLocalPath) {\n    log('plugin installed locall in app folder');\n    return appLocalPath;\n  }\n\n  log(`global install path: ${globalModules}`);\n  const globalPath = resolveFrom.silent(path.resolve(globalModules, '..'), name);\n  if (globalPath) {\n    log('plugin installed globally');\n    return globalPath;\n  }\n  log('plugin not found');\n  return name;\n}\n\nexport function loadPlugins(plugins) {\n  plugins\n    .map(plugin => {\n      try {\n        let module = require(plugin.path); // eslint-disable-line global-require\n        let name = module.name || plugin.name;\n        return { name, module };\n      } catch (e) {\n        if (e.code !== 'MODULE_NOT_FOUND') {\n          console.log(e);\n        }\n        console.log(`Unable to load plugin ${plugin.name}`);\n        return { name: module.name || plugin.name, failed: true };\n      }\n    })\n    .forEach(plugin => {\n      if (plugin.failed) {\n        return;\n      }\n      modules[plugin.name] = plugin.module;\n      if (plugin.module.commands) {\n        Object.keys(plugin.module.commands).forEach(key => {\n          registerCommand(plugin.name, key, plugin.module.commands[key]);\n        });\n      }\n      if (plugin.module.hooks) {\n        Object.keys(plugin.module.hooks).forEach(key => {\n          registerHook(key, plugin.module.hooks[key]);\n        });\n      }\n      if (typeof plugin.module.validate === 'object') {\n        const validators = Object.entries(plugin.module.validate);\n        for (const [property, validator] of validators) {\n          addPluginValidator(property, validator);\n        }\n      }\n      if (plugin.module.prepareConfig) {\n        registerPreparer(plugin.module.prepareConfig);\n      }\n    });\n}\n\nfunction isDirectoryMupModule({ name, path: modulePath }) {\n  if (name === '__tests__') {\n    return false;\n  }\n\n  const moduleDir = join(__dirname, modulePath);\n  return fs.statSync(moduleDir).isDirectory();\n}\n"]}