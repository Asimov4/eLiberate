{"version":3,"sources":["../../../../src/plugins/docker/__tests__/index.js"],"names":["config","silent","servers","require","timeout","checkDocker","name","serverInfo","cd","tmpdir","out","exec","equal","code","num","output","sshOut"],"mappings":";;AAAA;;AAEA;;AAEA;;;;AACA;;;;AACA;;;;;;;AALA;;;AAOA,kBAAGA,MAAH,CAAUC,MAAV,GAAmB,KAAnB;AACA,IAAMC,UAAUC,QAAQ,oCAAR,CAAhB;;AAEA,qBAAS,iBAAT,EAA4B,YAAW;AACrC,OAAKC,OAAL,CAAa,OAAb;;AAEA,uBAAS,OAAT,EAAkB,YAAW;AAC3B;AACA;AACA;AACA,aAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB;AACA,UAAMC,aAAaL,QAAQ,OAAOI,IAAf,CAAnB;;AAEA,uDAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,qBAAKF,OAAL,CAAa,KAAb;;AAEA,kCAAGI,EAAH,CAAM,wBAAY,aAAGC,MAAH,EAAZ,EAAyB,iBAAzB,CAAN;AACMC,mBAJD,GAIO,kBAAGC,IAAH,CAAQ,kBAAR,CAJP;;AAKL,iCAAOC,KAAP,CAAaF,IAAIG,IAAjB,EAAuB,CAAvB;;AAEMC,mBAPD,GAOO,4BAAgB,uBAAhB,EAAyCJ,IAAIK,MAA7C,CAPP;;AAQL,iCAAOH,KAAP,CAAaE,GAAb,EAAkB,CAAlB;;AARK;AAAA,uBAUgB,0BAAcP,UAAd,EAA0B,cAA1B,CAVhB;;AAAA;AAUCS,sBAVD;;AAWL,iCAAOJ,KAAP,CAAaI,OAAOH,IAApB,EAA0B,CAA1B;;AAXK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AAaD;;AAED,mBAAG,sCAAH,EAA2CR,YAAY,QAAZ,CAA3C;AACA,mBAAG,qCAAH,EAA0CA,YAAY,OAAZ,CAA1C;AACA,mBAAG,qCAAH,EAA0CA,YAAY,OAAZ,CAA1C;AACD,GA1BD;AA2BD,CA9BD","file":"index.js","sourcesContent":["import { countOccurences, resolvePath, runSSHCommand } from '../../../utils';\n/* eslint-disable max-len */\nimport { describe, it } from 'mocha';\n\nimport assert from 'assert';\nimport os from 'os';\nimport sh from 'shelljs';\n\nsh.config.silent = false;\nconst servers = require('../../../../tests/fixtures/servers');\n\ndescribe('module - docker', function() {\n  this.timeout(6000000);\n\n  describe('setup', function() {\n    // reuse this function for 3 tests below\n    // TODO break this into multiple functions\n    // so parts can be used for other tests\n    function checkDocker(name) {\n      // TODO get server name form mup.js file\n      const serverInfo = servers['my' + name];\n\n      return async function() {\n        this.timeout(60000);\n\n        sh.cd(resolvePath(os.tmpdir(), 'tests/project-1'));\n        const out = sh.exec('mup docker setup');\n        assert.equal(out.code, 0);\n\n        const num = countOccurences('Setup Docker: SUCCESS', out.output);\n        assert.equal(num, 1);\n\n        const sshOut = await runSSHCommand(serverInfo, 'which docker');\n        assert.equal(sshOut.code, 0);\n      };\n    }\n\n    it('should install docker on \"meteor\" vm', checkDocker('meteor'));\n    it('should install docker on \"mongo\" vm', checkDocker('mongo'));\n    it('should install docker on \"proxy\" vm', checkDocker('proxy'));\n  });\n});\n"]}