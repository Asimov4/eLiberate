{"version":3,"sources":["../../../src/plugins/docker/command-handlers.js"],"names":["setup","restart","ps","log","uniqueSessions","api","sessions","getSessions","reduce","prev","curr","map","session","_host","indexOf","push","list","taskList","executeScript","script","resolvePath","__dirname","runTaskList","verbose","args","getArgs","shift","cb","execute","join","err","code","logs","console","magenta","blue","stdout"],"mappings":";;;;;QAoBgBA,K,GAAAA,K;QAYAC,O,GAAAA,O;QAYAC,E,GAAAA,E;;AA5ChB;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,IAAMC,MAAM,qBAAM,mBAAN,CAAZ;;AAEA,SAASC,cAAT,CAAwBC,GAAxB,EAA6B;AAC3B,MAAMC,WAAWD,IAAIE,WAAJ,CAAgB,CAAC,KAAD,EAAQ,OAAR,EAAiB,OAAjB,CAAhB,CAAjB;AACA,SAAOD,SAASE,MAAT,CACL,UAACC,IAAD,EAAOC,IAAP,EAAgB;AACd,QAAID,KAAKE,GAAL,CAAS;AAAA,aAAWC,QAAQC,KAAnB;AAAA,KAAT,EAAmCC,OAAnC,CAA2CJ,KAAKG,KAAhD,MAA2D,CAAC,CAAhE,EAAmE;AACjEJ,WAAKM,IAAL,CAAUL,IAAV;AACD;AACD,WAAOD,IAAP;AACD,GANI,EAOL,EAPK,CAAP;AASD;;AAEM,SAAST,KAAT,CAAeK,GAAf,EAAoB;AACzBF,MAAI,0BAAJ;AACA,MAAMa,OAAO,oBAAUC,QAAV,CAAmB,cAAnB,CAAb;;AAEAD,OAAKE,aAAL,CAAmB,cAAnB,EAAmC;AACjCC,YAAQd,IAAIe,WAAJ,CAAgBC,SAAhB,EAA2B,wBAA3B;AADyB,GAAnC;;AAIA,MAAMf,WAAWF,eAAeC,GAAf,CAAjB;AACA,SAAOA,IAAIiB,WAAJ,CAAgBN,IAAhB,EAAsBV,QAAtB,EAAgC,EAAEiB,SAASlB,IAAIkB,OAAf,EAAhC,CAAP;AACD;;AAEM,SAAStB,OAAT,CAAiBI,GAAjB,EAAsB;AAC3B,MAAMW,OAAO,oBAAUC,QAAV,CAAmB,uBAAnB,CAAb;;AAEAD,OAAKE,aAAL,CAAmB,gBAAnB,EAAqC;AACnCC,YAAQd,IAAIe,WAAJ,CAAgBC,SAAhB,EAA2B,0BAA3B;AAD2B,GAArC;;AAIA,MAAMf,WAAWF,eAAeC,GAAf,CAAjB;;AAEA,SAAOA,IAAIiB,WAAJ,CAAgBN,IAAhB,EAAsBV,QAAtB,EAAgC,EAAEiB,SAASlB,IAAIkB,OAAf,EAAhC,CAAP;AACD;;AAEM,SAASrB,EAAT,CAAYG,GAAZ,EAAiB;AACtB,MAAImB,OAAOnB,IAAIoB,OAAJ,EAAX;AACAD,OAAKE,KAAL;AACA,mBAAKtB,eAAeC,GAAf,CAAL,EAA0B,UAACO,OAAD,EAAUe,EAAV,EAAiB;AACzCf,YAAQgB,OAAR,kBAA+BJ,KAAKK,IAAL,CAAU,GAAV,CAA/B,YAAsD,UAACC,GAAD,EAAMC,IAAN,EAAYC,IAAZ,EAAqB;AACzEC,cAAQ9B,GAAR,CAAY,gBAAM+B,OAAN,OAAkBtB,QAAQC,KAA1B,UAAsC,gBAAMsB,IAAN,cAAsBX,KAAKK,IAAL,CAAU,GAAV,CAAtB,CAAlD;AACAI,cAAQ9B,GAAR,CAAY6B,KAAKI,MAAjB;AACAT;AACD,KAJD;AAKD,GAND;AAOD","file":"command-handlers.js","sourcesContent":["import chalk from 'chalk';\nimport debug from 'debug';\nimport { each } from 'async';\nimport nodemiral from 'nodemiral';\n\nconst log = debug('mup:module:docker');\n\nfunction uniqueSessions(api) {\n  const sessions = api.getSessions(['app', 'mongo', 'proxy']);\n  return sessions.reduce(\n    (prev, curr) => {\n      if (prev.map(session => session._host).indexOf(curr._host) === -1) {\n        prev.push(curr);\n      }\n      return prev;\n    },\n    []\n  );\n}\n\nexport function setup(api) {\n  log('exec => mup docker setup');\n  const list = nodemiral.taskList('Setup Docker');\n\n  list.executeScript('Setup Docker', {\n    script: api.resolvePath(__dirname, 'assets/docker-setup.sh')\n  });\n\n  const sessions = uniqueSessions(api);\n  return api.runTaskList(list, sessions, { verbose: api.verbose });\n}\n\nexport function restart(api) {\n  const list = nodemiral.taskList('Restart Docker Daemon');\n\n  list.executeScript('Restart Docker', {\n    script: api.resolvePath(__dirname, 'assets/docker-restart.sh')\n  });\n\n  const sessions = uniqueSessions(api);\n\n  return api.runTaskList(list, sessions, { verbose: api.verbose });\n}\n\nexport function ps(api) {\n  let args = api.getArgs();\n  args.shift();\n  each(uniqueSessions(api), (session, cb) => {\n    session.execute(`sudo docker ${args.join(' ')} 2>&1`, (err, code, logs) => {\n      console.log(chalk.magenta(`[${session._host}]`) + chalk.blue(` docker ${args.join(' ')}`));\n      console.log(logs.stdout);\n      cb();\n    });\n  });\n}\n"]}