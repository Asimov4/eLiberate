{"version":3,"sources":["../../../../src/plugins/default/__tests__/index.js"],"names":["use","config","silent","servers","require","timeout","serverInfo","cd","resolve","tmpdir","exec","out","code","to","equal","output","be","ssh1","ssh2","dir","mkdir","existsSync","true","rm","have","entriesCount","gte"],"mappings":"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","file":"index.js","sourcesContent":["import chai, { expect } from 'chai';\nimport { countOccurences, runSSHCommand } from '../../../utils';\nimport { describe, it } from 'mocha';\n\nimport chaiString from 'chai-string';\n/* eslint-disable max-len, no-unused-expressions */\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport sh from 'shelljs';\n\nchai.use(chaiString);\n\nsh.config.silent = false;\nconst servers = require('../../../../tests/fixtures/servers');\n\ndescribe('module - default', function() {\n  this.timeout(600000);\n\n  describe('deploy', function() {\n    it('should deploy meteor app on \"meteor\" vm', async () => {\n      const serverInfo = servers['mymeteor'];\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n      sh.exec('mup setup');\n\n      const out = sh.exec('mup deploy --cached-build');\n\n      expect(out.code).to.equal(0);\n      expect(\n        countOccurences('Building App Bundle Locally', out.output)\n      ).to.be.equal(1);\n      expect(\n        countOccurences(\n          'Pushing Meteor App Bundle to The Server: SUCCESS',\n          out.output\n        )\n      ).to.be.equal(1);\n      expect(\n        countOccurences('Pushing the Startup Script: SUCCESS', out.output)\n      ).to.be.equal(1);\n      expect(\n        countOccurences('Sending Environment Variables: SUCCESS', out.output)\n      ).to.be.equal(1);\n      expect(countOccurences('Start Meteor: SUCCESS', out.output)).to.be.equal(\n        1\n      );\n      expect(\n        countOccurences('Verifying Deployment: SUCCESS', out.output)\n      ).to.be.equal(1);\n      const ssh1 = await runSSHCommand(\n        serverInfo,\n        'nc -z -v -w5 localhost 27017'\n      );\n      expect(ssh1.code).to.be.equal(0);\n      const ssh2 = await runSSHCommand(\n        serverInfo,\n        'curl localhost:80 && exit 0'\n      );\n      expect(ssh2.code).to.be.equal(0);\n    });\n  });\n\n  describe('init', function() {\n    it('should create \"mup.js\" and \"setting.json\" in /tmp/project-tmp', () => {\n      const dir = path.resolve(os.tmpdir(), 'project-tmp');\n      sh.mkdir(dir);\n      sh.cd(dir);\n      sh.exec('mup init');\n      expect(fs.existsSync(path.resolve(dir, 'mup.js'))).to.true;\n      expect(fs.existsSync(path.resolve(dir, 'settings.json'))).to.true;\n      sh.rm('-rf', dir);\n    });\n  });\n\n  describe('logs', function() {\n    it('should pull the logs from meteor app', () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n      const out = sh.exec('mup logs --tail 2');\n      expect(out.code).to.be.equal(0);\n    });\n  });\n\n  describe('reconfig', function() {\n    it('should reconfig meteor app on \"meteor\" vm', async () => {\n      const serverInfo = servers['mymeteor'];\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n      sh.exec('mup setup  && mup deploy --cached-build');\n\n      const out = sh.exec('mup reconfig');\n\n      expect(out.code).to.be.equal(0);\n      expect(\n        countOccurences('Sending Environment Variables: SUCCESS', out.output)\n      ).to.be.equal(1);\n      expect(countOccurences('Start Meteor: SUCCESS', out.output)).to.be.equal(\n        1\n      );\n      expect(\n        countOccurences('Verifying Deployment: SUCCESS', out.output)\n      ).to.be.equal(1);\n      expect(\n        (await runSSHCommand(serverInfo, 'curl localhost:80 && exit 0')).code\n      ).to.be.equal(0);\n    });\n  });\n\n  describe('restart', function() {\n    it('should restart meteor app on \"meteor\" vm', async () => {\n      const serverInfo = servers['mymeteor'];\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n      sh.exec('mup setup  && mup deploy --cached-build');\n\n      const out = sh.exec('mup restart');\n\n      expect(out.code).to.be.equal(0);\n      expect(out.output).to.have.entriesCount('Stop Meteor: SUCCESS', 1);\n      expect(out.output).to.have.entriesCount('Start Meteor: SUCCESS', 1);\n      expect(\n        out.output\n      ).to.have.entriesCount('Verifying Deployment: SUCCESS', 1);\n      expect(\n        (await runSSHCommand(serverInfo, 'curl localhost:80 && exit 0')).code\n      ).to.be.equal(0, 'Curl exit code');\n    });\n  });\n\n  describe('setup', function() {\n    it('should setup \"meteor\" vm', async () => {\n      const serverInfo = servers['mymeteor'];\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n\n      const out = sh.exec('mup setup');\n\n      expect(out.code).to.be.equal(0);\n      expect(countOccurences('Setup Docker: SUCCESS', out.output)).to.be.equal(\n        1\n      );\n      expect(\n        countOccurences('Setup Environment: SUCCESS', out.output)\n      ).to.be.equal(2);\n      expect(countOccurences('Start Mongo: SUCCESS', out.output)).to.be.equal(\n        1\n      );\n      expect(\n        (await runSSHCommand(serverInfo, 'nc -z -v -w5 localhost 27017')).code\n      ).to.be.equal(0);\n    });\n  });\n\n  describe('start', function() {\n    it('should start meteor app on \"meteor\" vm', async () => {\n      const serverInfo = servers['mymeteor'];\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n      sh.exec('mup setup  && mup meteor push --cached-build && mup meteor envconfig');\n\n      const out = sh.exec('mup start');\n\n      expect(out.code).to.be.equal(0);\n      expect(countOccurences('Start Meteor: SUCCESS', out.output)).to.be.equal(\n        1\n      );\n      expect(\n        countOccurences('Verifying Deployment: SUCCESS', out.output)\n      ).to.be.equal(1);\n      expect(\n        (await runSSHCommand(serverInfo, 'curl localhost:80 && exit 0')).code\n      ).to.be.equal(0);\n    });\n  });\n\n  describe('stop', function() {\n    it('should stop meteor app on \"meteor\" vm', async () => {\n      const serverInfo = servers['mymeteor'];\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n      sh.exec('mup setup  && mup deploy --cached-build');\n\n      const out = sh.exec('mup stop');\n\n      expect(out.code).to.be.equal(0);\n      expect(countOccurences('Stop Meteor: SUCCESS', out.output)).to.be.equal(\n        1\n      );\n      expect(\n        (await runSSHCommand(serverInfo, 'curl localhost:80 && exit 0')).code\n      ).to.be.equal(7);\n    });\n  });\n\n  describe('syslog', function() {\n    const serverInfo = servers['mymeteor'];\n\n    it('should write meteor logst to syslog on \"meteor\" vm', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-2'));\n\n      sh.exec('mup setup && mup deploy --cached-build');\n      const out = await runSSHCommand(\n        serverInfo,\n        'sudo tail -n 100 /var/log/syslog'\n      );\n      expect(out.code).to.be.equal(0);\n\n      expect(\n        countOccurences('=> Starting meteor app on port:80', out.output)\n      ).gte(1);\n    });\n  });\n});\n"]}