{"version":3,"sources":["../../../src/plugins/proxy/command-handlers.js"],"names":["logs","leLogs","setup","reconfigShared","start","stop","log","PROXY_CONTAINER_NAME","api","config","getConfig","proxy","console","error","process","exit","args","getArgs","slice","sessions","getSessions","getDockerLogs","appName","app","name","list","taskList","executeScript","script","resolvePath","__dirname","vars","copy","src","dest","letsEncryptEmail","ssl","proxyName","upload","crt","getBasePath","key","domains","split","runTaskList","series","verbose","getVerbose","then","runCommand","shared","Object","keys","length","httpPort","httpsPort","clientUploadLimit","env","envLetsEncrypt"],"mappings":"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","file":"command-handlers.js","sourcesContent":["import { clone } from 'lodash';\nimport debug from 'debug';\nimport nodemiral from 'nodemiral';\n\nconst log = debug('mup:module:proxy');\nconst PROXY_CONTAINER_NAME = 'mup-nginx-proxy';\n\nexport function logs(api) {\n  log('exec => mup proxy logs');\n  const config = api.getConfig().proxy;\n\n  if (!config) {\n    console.error('error: no configs found for proxy');\n    process.exit(1);\n  }\n\n  const args = api.getArgs().slice(1);\n  const sessions = api.getSessions(['app']);\n  return api.getDockerLogs(PROXY_CONTAINER_NAME, sessions, args);\n}\n\nexport function leLogs(api) {\n  log('exec => mup proxy le-logs');\n  const config = api.getConfig().proxy;\n\n  if (!config) {\n    console.error('error: no configs found for proxy');\n    process.exit(1);\n  }\n\n  const args = api.getArgs().slice(1);\n  args[0] = 'logs';\n  const sessions = api.getSessions(['app']);\n\n  return api.getDockerLogs(\n    `${PROXY_CONTAINER_NAME}-letsencrypt`,\n    sessions,\n    args\n  );\n}\n\nexport function setup(api) {\n  log('exec => mup proxy setup');\n  const config = api.getConfig().proxy;\n  const appName = api.getConfig().app.name;\n\n  if (!config) {\n    console.error('error: no configs found for proxy');\n    process.exit(1);\n  }\n\n  const list = nodemiral.taskList('Setup proxy');\n\n  list.executeScript('Setup Environment', {\n    script: api.resolvePath(__dirname, 'assets/proxy-setup.sh'),\n    vars: {\n      name: PROXY_CONTAINER_NAME\n    }\n  });\n\n  list.copy('Pushing the Startup Script', {\n    src: api.resolvePath(__dirname, 'assets/templates/start.sh'),\n    dest: '/opt/' + PROXY_CONTAINER_NAME + '/config/start.sh',\n    vars: {\n      appName: PROXY_CONTAINER_NAME,\n      letsEncryptEmail: config.ssl ? config.ssl.letsEncryptEmail : null\n    }\n  });\n\n\n  list.executeScript('Cleaning Up SSL Certificates', {\n    script: api.resolvePath(__dirname, 'assets/ssl-cleanup.sh'),\n    vars: {\n      name: appName,\n      proxyName: PROXY_CONTAINER_NAME\n    }\n  });\n\n  if (\n    config.ssl &&\n    !config.ssl.letsEncryptEmail &&\n    config.ssl.upload !== false &&\n    config.ssl.crt\n  ) {\n    list.copy('Copying SSL Certificate Bundle', {\n      src: api.resolvePath(api.getBasePath(), config.ssl.crt),\n      dest: `/opt/${appName}/config/bundle.crt`\n    });\n    list.copy('Copying SSL Private Key', {\n      src: api.resolvePath(api.getBasePath(), config.ssl.key),\n      dest: `/opt/${appName}/config/private.key`\n    });\n    list.executeScript('Setup SSL Certificates for Domains', {\n      script: api.resolvePath(__dirname, 'assets/ssl-setup.sh'),\n      vars: {\n        appName,\n        proxyName: PROXY_CONTAINER_NAME,\n        domains: config.domains.split(',')\n      }\n    });\n  }\n\n  const sessions = api.getSessions(['app']);\n\n  return api.runTaskList(list, sessions, {\n    series: true,\n    verbose: api.getVerbose()\n  }).then(() => api.runCommand('proxy.start'));\n}\n\nexport function reconfigShared(api) {\n  const config = api.getConfig().proxy;\n  const shared = config.shared || {};\n\n  if (!config) {\n    console.error('error: no configs found for proxy');\n    process.exit(1);\n  }\n\n  console.log('The shared settings affect all apps using this reverse proxy.');\n\n  if (Object.keys(shared).length === 0) {\n    console.log('No shared config properties are set. Resetting proxy to defaults.');\n  }\n\n  const list = nodemiral.taskList('Configuring Proxy\\'s Shared Settings');\n\n  list.copy('Sending shared variables', {\n    src: api.resolvePath(__dirname, 'assets/templates/shared-config.sh'),\n    dest: '/opt/' + PROXY_CONTAINER_NAME + '/config/shared-config.sh',\n    vars: {\n      httpPort: shared.httpPort,\n      httpsPort: shared.httpsPort,\n      clientUploadLimit: shared.clientUploadLimit\n    }\n  });\n\n  const env = clone(shared.env);\n\n  list.copy('Sending proxy environment variables', {\n    src: api.resolvePath(__dirname, 'assets/templates/env.list'),\n    dest: '/opt/' + PROXY_CONTAINER_NAME + '/config/env.list',\n    vars: {\n      env: env || {}\n    }\n  });\n\n  const envLetsEncrypt = clone(shared.envLetsEncrypt);\n\n  list.copy('Sending let\\'s encrypt environment variables', {\n    src: api.resolvePath(__dirname, 'assets/templates/env.list'),\n    dest: '/opt/' + PROXY_CONTAINER_NAME + '/config/env_letsencrypt.list',\n    vars: {\n      env: envLetsEncrypt || {}\n    }\n  });\n\n  const sessions = api.getSessions(['app']);\n  return api.runTaskList(list, sessions, {\n    series: true,\n    verbose: api.verbose\n  }).then(() => api.runCommand('proxy.start'));\n}\n\nexport function start(api) {\n  log('exec => mup proxy start');\n  const config = api.getConfig().proxy;\n  if (!config) {\n    console.error('error: no configs found for proxy');\n    process.exit(1);\n  }\n\n  const list = nodemiral.taskList('Start proxy');\n\n  list.executeScript('Start proxy', {\n    script: api.resolvePath(__dirname, 'assets/proxy-start.sh'),\n    vars: {\n      appName: PROXY_CONTAINER_NAME\n    }\n  });\n\n  const sessions = api.getSessions(['app']);\n  return api.runTaskList(list, sessions, {\n    series: true,\n    verbose: api.getVerbose()\n  });\n}\n\nexport function stop(api) {\n  log('exec => mup proxy stop');\n\n  const list = nodemiral.taskList('Stop proxy');\n\n  list.executeScript('Stop proxy', {\n    script: api.resolvePath(__dirname, 'assets/proxy-stop.sh'),\n    vars: {\n      appName: PROXY_CONTAINER_NAME\n    }\n  });\n\n  const sessions = api.getSessions(['app']);\n  return api.runTaskList(list, sessions, { verbose: api.getVerbose() });\n}\n"]}