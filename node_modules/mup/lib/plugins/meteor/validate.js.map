{"version":3,"sources":["../../../src/plugins/meteor/validate.js"],"names":["config","combineErrorDetails","VALIDATE_OPTIONS","serversExist","addLocation","details","validate","app","schema","name","indexOf","push","message","path","ssl","env","servers","meteor","object","keys","string","min","required","port","number","type","pattern","bool","deployCheckWaitTime","deployCheckPort","enableUploadProgressBar","dockerImage","docker","image","trim","imagePort","imageFrontendServer","args","array","items","bind","prepareBundle","networks","buildOptions","serverOnly","debug","cleanAfterBuild","buildLocation","mobileSettings","server","uri","allowIncompatibleUpdates","boolean","executable","ROOT_URL","regex","RegExp","MONGO_URL","log","driver","opts","volumes","nginx","clientUploadLimit","autogenerate","email","domains","crt","key","upload","and","without","or"],"mappings":"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","file":"validate.js","sourcesContent":["import joi from 'joi';\n\nconst schema = joi.object().keys({\n  name: joi.string().min(1).required(),\n  path: joi.string().min(1).required(),\n  port: joi.number(),\n  type: joi.string(),\n  servers: joi.object().required().pattern(\n    /[/s/S]*/,\n    joi.object().keys({\n      env: joi.object().pattern(\n        /[/s/S]*/,\n        [joi.string(), joi.number(), joi.bool()]\n      )\n    })\n  ),\n  deployCheckWaitTime: joi.number(),\n  deployCheckPort: joi.number(),\n  enableUploadProgressBar: joi.bool(),\n  dockerImage: joi.string(),\n  docker: joi.object().keys({\n    image: joi.string().trim(),\n    imagePort: joi.number(),\n    imageFrontendServer: joi.string(),\n    args: joi.array().items(joi.string()),\n    bind: joi.string().trim(),\n    prepareBundle: joi.bool(),\n    networks: joi\n      .array()\n      .items(joi.string())\n  }),\n  buildOptions: joi.object().keys({\n    serverOnly: joi.bool(),\n    debug: joi.bool(),\n    cleanAfterBuild: joi.bool(),\n    buildLocation: joi.string(),\n    mobileSettings: joi.object(),\n    server: joi.string().uri(),\n    allowIncompatibleUpdates: joi.boolean(),\n    executable: joi.string()\n  }),\n  env: joi\n    .object()\n    .keys({\n      ROOT_URL: joi\n        .string()\n        .regex(\n          new RegExp('^(http|https)://', 'i'),\n          'valid url with \"http://\" or \"https://\"'\n        )\n        .required(),\n      MONGO_URL: joi.string()\n    })\n    .pattern(/[\\s\\S]*/, [joi.string(), joi.number(), joi.bool()]),\n  log: joi.object().keys({\n    driver: joi.string(),\n    opts: joi.object()\n  }),\n  volumes: joi.object(),\n  nginx: joi.object().keys({\n    clientUploadLimit: joi.string().trim()\n  }),\n  ssl: joi\n    .object()\n    .keys({\n      autogenerate: joi\n        .object()\n        .keys({\n          email: joi.string().email().required(),\n          domains: joi.string().required()\n        }),\n      crt: joi.string().trim(),\n      key: joi.string().trim(),\n      port: joi.number(),\n      upload: joi.boolean()\n    })\n    .and('crt', 'key')\n    .without('autogenerate', ['crt', 'key'])\n    .or('crt', 'autogenerate')\n});\n\nexport default function(\n  config,\n  { combineErrorDetails, VALIDATE_OPTIONS, serversExist, addLocation }\n) {\n  let details = [];\n  details = combineErrorDetails(\n    details,\n    joi.validate(config.app, schema, VALIDATE_OPTIONS)\n  );\n  if (config.app.name && config.app.name.indexOf(' ') > -1) {\n    details.push({\n      message: 'has a space',\n      path: 'name'\n    });\n  }\n  if (\n    typeof config.app.ssl === 'object' &&\n    'autogenerate' in config.app.ssl &&\n    'PORT' in config.app.env\n  ) {\n    details.push({\n      message: 'PORT can not be set when using ssl.autogenerate',\n      path: 'env'\n    });\n  }\n  details = combineErrorDetails(\n    details,\n    serversExist(config.servers, config.app.servers)\n  );\n\n  return addLocation(details, config.meteor ? 'meteor' : 'app');\n}\n"]}