{"version":3,"sources":["../src/plugin-api.js"],"names":["utils","resolvePath","PluginAPI","base","filteredArgs","program","_runHooks","handlers","hookName","messagePrefix","hookHandler","localCommand","console","log","_runHookScript","method","_commandErrorHandler","remoteCommand","getConfig","servers","_runPreHooks","name","yellow","hookList","_runPostHooks","commandName","runCommand","Error","potentialPromise","handler","e","process","exit","then","dirname","args","config","settings","sessions","_enabledSessions","split","configPath","join","settingsPath","verbose","runTaskList","getDockerLogs","runSSHCommand","_createSSHOptions","createSSHOptions","contents","readFileSync","getBasePath","meteor","path","toString","regex","RegExp","test","problems","length","red","plural","forEach","problem","app","Object","assign","type","validate","require","code","error","validateConfig","_normalizeConfig","filePath","text","message","newConfig","script","execSync","cwd","stdio","exitCode","nodemiralHistory","Array","modules","_pickSessions","keys","map","plugins","_loadSessions","moduleConfig","moduleName","hasOwnProperty","indexOf","info","auth","username","opts","ssh","sshAgent","env","SSH_AUTH_SOCK","pem","password","existsSync","agent","session","host"],"mappings":"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","file":"plugin-api.js","sourcesContent":["import * as utils from './utils';\n\nimport { hooks, runRemoteHooks } from './hooks';\n\nimport chalk from 'chalk';\nimport childProcess from 'child_process';\nimport { commands } from './commands';\nimport configValidator from './validate/index';\nimport fs from 'fs';\nimport nodemiral from 'nodemiral';\nimport parseJson from 'parse-json';\nimport path from 'path';\nimport { runConfigPreps } from './prepare-config';\n\nconst { resolvePath } = utils;\n\nexport default class PluginAPI {\n  constructor(base, filteredArgs, program) {\n    this.base = program['config'] ? path.dirname(program['config']) : base;\n    this.args = filteredArgs;\n    this.config = null;\n    this.settings = null;\n    this.sessions = null;\n    this._enabledSessions = program.servers ? program.servers.split(',') : [];\n    this.configPath = program['config'] ? resolvePath(program['config']) : path.join(this.base, 'mup.js');\n    this.settingsPath = program['settings'];\n    this.verbose = program.verbose;\n    this.program = program;\n\n    this.resolvePath = utils.resolvePath;\n    this.runTaskList = utils.runTaskList;\n    this.getDockerLogs = utils.getDockerLogs;\n    this.runSSHCommand = utils.runSSHCommand;\n    this._createSSHOptions = utils.createSSHOptions;\n  }\n\n  getArgs() {\n    return this.args;\n  }\n\n  getBasePath() {\n    return this.base;\n  }\n\n  getVerbose() {\n    return this.verbose;\n  }\n\n  getOptions() {\n    return this.program;\n  }\n\n  hasMeteorPackage(name) {\n    // Check if app is using the package\n    try {\n      var contents = fs\n        .readFileSync(resolvePath(this.getBasePath(), this.getConfig().meteor.path, '.meteor/versions'))\n        .toString();\n      // Looks for \"package-name@\" in the beginning of a\n      // line or at the start of the file\n      let regex = new RegExp(`(^|\\\\s)${name}@`, 'm');\n      return regex.test(contents);\n\n    } catch (e) {\n      console.log(`Unable to load file ${resolvePath(this.getBasePath(), this.getConfig().meteor.path, '.meteor/versions')}`);\n      return false;\n    }\n  }\n\n  validateConfig(configPath) {\n    let problems = configValidator(this.getConfig());\n\n    if (problems.length > 0) {\n      let red = chalk.red;\n      let plural = problems.length > 1 ? 's' : '';\n\n      console.log(`loaded config from ${configPath}`);\n      console.log('');\n      console.log(red(`${problems.length} Validation Error${plural}`));\n\n      problems.forEach(problem => {\n        console.log(red(`  - ${problem}`));\n      });\n\n      console.log('');\n      console.log(\n        'Read the docs and view example configs at'\n      );\n      console.log('    http://meteor-up.com/docs');\n      console.log('');\n    }\n\n    return problems;\n  }\n  _normalizeConfig(config) {\n    if (typeof config !== 'object') {\n      return config;\n    }\n    if (config.meteor && typeof config.app !== 'object') {\n      config.app = Object.assign({}, config.meteor);\n      config.app.type = 'meteor';\n    } else if (typeof config.app === 'object' && !('type' in config.app)) {\n      config.app.type = 'meteor';\n    }\n\n    return runConfigPreps(config);\n  }\n  getConfig(validate = true) {\n    if (!this.config) {\n      try {\n        // eslint-disable-next-line global-require\n        this.config = require(this.configPath);\n      } catch (e) {\n        if (!validate) {\n          return {};\n        }\n        if (e.code === 'MODULE_NOT_FOUND') {\n          console.error('\"mup.js\" file not found at');\n          console.error(`  ${this.configPath}`);\n          console.error('Run \"mup init\" to create it.');\n        } else {\n          console.error(e);\n        }\n        process.exit(1);\n      }\n      if (validate) {\n        this.validateConfig(this.configPath);\n      }\n      this.config = this._normalizeConfig(this.config);\n    }\n\n    return this.config;\n  }\n\n  getSettings() {\n    if (!this.settings) {\n      let filePath;\n      if (this.settingsPath) {\n        filePath = resolvePath(this.settingsPath);\n      } else {\n        filePath = path.join(this.base, 'settings.json');\n      }\n\n      try {\n        this.settings = fs.readFileSync(filePath).toString();\n      } catch (e) {\n        console.log(`Unable to load settings.json at ${filePath}`);\n        if (e.code !== 'ENOENT') {\n          console.log(e);\n        } else {\n          [\n            'It does not exist.',\n            '',\n            'You can create the file with \"mup init\" or add the option',\n            '\"--settings path/to/settings.json\" to load it from a',\n            'different location.'\n          ].forEach(text => console.log(text));\n        }\n        process.exit(1);\n      }\n      try {\n        this.settings = parseJson(this.settings);\n      } catch (e) {\n        console.log('Error parsing settings file:');\n        console.log(e.message);\n\n        process.exit(1);\n      }\n    }\n\n    return this.settings;\n  }\n\n  setConfig(newConfig) {\n    this.config = newConfig;\n  }\n\n  _runHookScript(script) {\n    try {\n      childProcess.execSync(script, {\n        cwd: this.getBasePath(),\n        stdio: 'inherit'\n      });\n    } catch (e) {\n      // do nothing\n    }\n  }\n  _runHooks = async function(handlers, hookName) {\n    const messagePrefix = `> Running hook ${hookName}`;\n    for (let hookHandler of handlers) {\n      if (hookHandler.localCommand) {\n        console.log(`${messagePrefix} \"${hookHandler.localCommand}\"`);\n        this._runHookScript(hookHandler.localCommand);\n      }\n      if (typeof hookHandler.method === 'function') {\n        try {\n          await hookHandler.method(this, nodemiral);\n        } catch (e) {\n          this._commandErrorHandler(e);\n        }\n      }\n      if (hookHandler.remoteCommand) {\n        console.log(\n          `${messagePrefix} remote command \"${hookHandler.remoteCommand}\"`\n        );\n        await runRemoteHooks(\n          this.getConfig().servers,\n          hookHandler.remoteCommand\n        );\n      }\n    }\n  }\n  _runPreHooks = async function(name) {\n    let hookName = `pre.${name}`;\n\n    if (this.program['show-hook-names']) {\n      console.log(chalk.yellow(`Hook: ${hookName}`));\n    }\n\n    if (hookName in hooks) {\n      let hookList = hooks[hookName];\n      await this._runHooks(hookList, name);\n    }\n  };\n  _runPostHooks = async function(commandName) {\n    const hookName = `post.${commandName}`;\n\n    if (this.program['show-hook-names']) {\n      console.log(chalk.yellow(`Hook: ${hookName}`));\n    }\n\n    if (hookName in hooks) {\n      let hookList = hooks[hookName];\n      await this._runHooks(hookList, hookName);\n    }\n    return;\n  };\n  _commandErrorHandler(e) {\n    process.exitCode = 1;\n\n    if (e.nodemiralHistory instanceof Array) {\n      // Error is from nodemiral when running a task list.\n      // Nodemiral should have already displayed the error\n      return;\n    }\n\n    console.error(e);\n  }\n  runCommand = async function(name) {\n    if (!name) {\n      throw new Error('Command name is required');\n    }\n\n    if (!(name in commands)) {\n      throw new Error(`Unknown command name: ${name}`);\n    }\n    await this._runPreHooks(name);\n    let potentialPromise;\n    try {\n      potentialPromise = commands[name].handler(this, nodemiral);\n    } catch (e) {\n      this._commandErrorHandler(e);\n      process.exit(1);\n    }\n\n    if (potentialPromise && typeof potentialPromise.then === 'function') {\n      return potentialPromise.then(() => this._runPostHooks(name));\n    }\n    return await this._runPostHooks(name);\n  };\n\n  getSessions(modules = []) {\n    const sessions = this._pickSessions(modules);\n    return Object.keys(sessions).map(name => sessions[name]);\n  }\n\n  _pickSessions(plugins = []) {\n    if (!this.sessions) {\n      this._loadSessions();\n    }\n\n    const sessions = {};\n\n    plugins.forEach(moduleName => {\n      const moduleConfig = this.getConfig()[moduleName];\n      if (!moduleConfig) {\n        return;\n      }\n\n      for (var name in moduleConfig.servers) {\n        if (!moduleConfig.servers.hasOwnProperty(name)) {\n          continue;\n        }\n\n        if (this.sessions[name]) {\n          sessions[name] = this.sessions[name];\n        }\n      }\n    });\n\n    return sessions;\n  }\n\n  _loadSessions() {\n    const config = this.getConfig();\n    this.sessions = {};\n\n    // `mup.servers` contains login information for servers\n    // Use this information to create nodemiral sessions.\n    for (var name in config.servers) {\n      if (!config.servers.hasOwnProperty(name)) {\n        continue;\n      }\n\n      if (\n        this._enabledSessions.length > 0 &&\n          this._enabledSessions.indexOf(name) === -1\n      ) {\n        continue;\n      }\n\n      const info = config.servers[name];\n      const auth = {\n        username: info.username\n      };\n      const opts = {\n        ssh: {}\n      };\n\n      var sshAgent = process.env.SSH_AUTH_SOCK;\n\n      if (info.opts) {\n        opts.ssh = info.opts;\n      }\n\n      if (info.pem) {\n        try {\n          auth.pem = fs.readFileSync(resolvePath(info.pem), 'utf8');\n        } catch (e) {\n          console.error(`Unable to load pem at \"${resolvePath(info.pem)}\"`);\n          console.error(`for server \"${name}\"`);\n          if (e.code !== 'ENOENT') {\n            console.log(e);\n          }\n          process.exit(1);\n        }\n      } else if (info.password) {\n        auth.password = info.password;\n      } else if (sshAgent && fs.existsSync(sshAgent)) {\n        opts.ssh.agent = sshAgent;\n      } else {\n        console.error(\n          \"error: server %s doesn't have password, ssh-agent or pem\",\n          name\n        );\n        process.exit(1);\n      }\n\n      const session = nodemiral.session(info.host, auth, opts);\n      this.sessions[name] = session;\n    }\n  }\n}\n"]}