<testsuites name="jest tests">
  <testsuite name="enroll-account-email" tests="3" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:15" time="3.266">
    <testcase classname="enroll-account-email sets email template &quot;from&quot; to Meteor.settings.public.accounts.email.fromAddress" name="enroll-account-email sets email template &quot;from&quot; to Meteor.settings.public.accounts.email.fromAddress" time="0.007">
    </testcase>
    <testcase classname="enroll-account-email sets email template &quot;subject&quot; using Meteor.settings.public.accounts.siteName" name="enroll-account-email sets email template &quot;subject&quot; using Meteor.settings.public.accounts.siteName" time="0.001">
    </testcase>
    <testcase classname="enroll-account-email sets email body which contains users name" name="enroll-account-email sets email body which contains users name" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="router-auth-hooks" tests="4" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:15" time="3.301">
    <testcase classname="router-auth-hooks requireAuth if not signed in, redirects to /sign-in with the redirect path as query" name="router-auth-hooks requireAuth if not signed in, redirects to /sign-in with the redirect path as query" time="0.01">
    </testcase>
    <testcase classname="router-auth-hooks requireAuth if signed in, continues to route" name="router-auth-hooks requireAuth if signed in, continues to route" time="0.002">
    </testcase>
    <testcase classname="router-auth-hooks requireNoAuth if not signed in, continues to route" name="router-auth-hooks requireNoAuth if not signed in, continues to route" time="0.001">
    </testcase>
    <testcase classname="router-auth-hooks requireNoAuth if signed in, redirects to /home" name="router-auth-hooks requireNoAuth if signed in, redirects to /home" time="0">
    </testcase>
  </testsuite>
  <testsuite name="password-reset-email" tests="3" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:15" time="3.064">
    <testcase classname="password-reset-email sets email template &quot;from&quot; to Meteor.settings.public.accounts.email.fromAddress" name="password-reset-email sets email template &quot;from&quot; to Meteor.settings.public.accounts.email.fromAddress" time="0.005">
    </testcase>
    <testcase classname="password-reset-email sets email template &quot;subject&quot; using Meteor.settings.public.accounts.siteName" name="password-reset-email sets email template &quot;subject&quot; using Meteor.settings.public.accounts.siteName" time="0.001">
    </testcase>
    <testcase classname="password-reset-email sets email body which contains users name" name="password-reset-email sets email body which contains users name" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="PagePrivate" tests="1" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:16" time="3.006">
    <testcase classname="PagePrivate renders without crashing" name="PagePrivate renders without crashing" time="0.028">
    </testcase>
  </testsuite>
  <testsuite name="accounts-validation" tests="1" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:15" time="3.736">
    <testcase classname="accounts-validation sets validateNewUser and validateLoginAttempt" name="accounts-validation sets validateNewUser and validateLoginAttempt" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="counter-store" tests="2" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:15" time="3.348">
    <testcase classname="counter-store initial state contains a count of 0" name="counter-store initial state contains a count of 0" time="0.008">
    </testcase>
    <testcase classname="counter-store getters countPlusTen returns state.count + 10" name="counter-store getters countPlusTen returns state.count + 10" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="create-unverified-user" tests="2" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:15" time="3.683">
    <testcase classname="create-unverified-user does nothing if not run on server" name="create-unverified-user does nothing if not run on server" time="0.01">
    </testcase>
    <testcase classname="create-unverified-user validation requires a real email, and string firstName and lastName" name="create-unverified-user validation requires a real email, and string firstName and lastName" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="auth-actions-mutations" tests="30" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:15" time="4.39">
    <testcase classname="auth-actions-mutations actions registerUser calls createUnverifiedUser() method, when that fails it commits REGISTER_FAILED with error and rejects error, " name="auth-actions-mutations actions registerUser calls createUnverifiedUser() method, when that fails it commits REGISTER_FAILED with error and rejects error, " time="0.013">
    </testcase>
    <testcase classname="auth-actions-mutations actions registerUser calls createUnverifiedUser() method, when that succees it commits CLEAR_REGISTER_FAILURE and ENROLL_ACCOUNT_EMAIL_SENT, then resolves true, " name="auth-actions-mutations actions registerUser calls createUnverifiedUser() method, when that succees it commits CLEAR_REGISTER_FAILURE and ENROLL_ACCOUNT_EMAIL_SENT, then resolves true, " time="0.002">
    </testcase>
    <testcase classname="auth-actions-mutations actions registerUser rejects error if createUnverifiedUser throws" name="auth-actions-mutations actions registerUser rejects error if createUnverifiedUser throws" time="0.002">
    </testcase>
    <testcase classname="auth-actions-mutations actions clearRegisterFailure clears any registure failure" name="auth-actions-mutations actions clearRegisterFailure clears any registure failure" time="0.001">
    </testcase>
    <testcase classname="auth-actions-mutations actions enrollVerifyAccount resolves false and commits ENROLL_ACCOUNT_FAILED if password isn&apos;t strong enough" name="auth-actions-mutations actions enrollVerifyAccount resolves false and commits ENROLL_ACCOUNT_FAILED if password isn&apos;t strong enough" time="0.026">
    </testcase>
    <testcase classname="auth-actions-mutations actions enrollVerifyAccount with strong password, calls Accounts.resetPassword, when that fails resolves false when resetPassword fails and commits ENROLL_ACCOUNT_FAILED" name="auth-actions-mutations actions enrollVerifyAccount with strong password, calls Accounts.resetPassword, when that fails resolves false when resetPassword fails and commits ENROLL_ACCOUNT_FAILED" time="0.002">
    </testcase>
    <testcase classname="auth-actions-mutations actions enrollVerifyAccount with strong password and reset password success, clears any error and resolves true" name="auth-actions-mutations actions enrollVerifyAccount with strong password and reset password success, clears any error and resolves true" time="0.002">
    </testcase>
    <testcase classname="auth-actions-mutations actions clearEnrollAccoutnFailure clears enroll account failure" name="auth-actions-mutations actions clearEnrollAccoutnFailure clears enroll account failure" time="0">
    </testcase>
    <testcase classname="auth-actions-mutations actions loginUser calls Meteor.loginWithPassword with credentials, when login fails, resolves false and commits failure" name="auth-actions-mutations actions loginUser calls Meteor.loginWithPassword with credentials, when login fails, resolves false and commits failure" time="0.002">
    </testcase>
    <testcase classname="auth-actions-mutations actions loginUser calls Meteor.loginWithPassword with credentials, when login succeeds, resolves true and clears error" name="auth-actions-mutations actions loginUser calls Meteor.loginWithPassword with credentials, when login succeeds, resolves true and clears error" time="0.001">
    </testcase>
    <testcase classname="auth-actions-mutations actions clearLoginFailure clears any login failure" name="auth-actions-mutations actions clearLoginFailure clears any login failure" time="0">
    </testcase>
    <testcase classname="auth-actions-mutations actions setUser sets the provided user" name="auth-actions-mutations actions setUser sets the provided user" time="0.001">
    </testcase>
    <testcase classname="auth-actions-mutations actions logoutUser calls Meteor.logout, when that fails, resolves false" name="auth-actions-mutations actions logoutUser calls Meteor.logout, when that fails, resolves false" time="0.001">
    </testcase>
    <testcase classname="auth-actions-mutations actions logoutUser calls Meteor.logout, when that succeeds, resolves true" name="auth-actions-mutations actions logoutUser calls Meteor.logout, when that succeeds, resolves true" time="0">
    </testcase>
    <testcase classname="auth-actions-mutations actions sendPasswordResetEmail calls Accoutns.forgotPassword, when that fails, commits failure and resolves false" name="auth-actions-mutations actions sendPasswordResetEmail calls Accoutns.forgotPassword, when that fails, commits failure and resolves false" time="0.001">
    </testcase>
    <testcase classname="auth-actions-mutations actions sendPasswordResetEmail calls Accoutns.forgotPassword, when that succeeds, clears any error and resolves true" name="auth-actions-mutations actions sendPasswordResetEmail calls Accoutns.forgotPassword, when that succeeds, clears any error and resolves true" time="0.001">
    </testcase>
    <testcase classname="auth-actions-mutations actions passwordReset calls Accounts.resetPassword, when that failures, commits failure with error and resolves false" name="auth-actions-mutations actions passwordReset calls Accounts.resetPassword, when that failures, commits failure with error and resolves false" time="0.001">
    </testcase>
    <testcase classname="auth-actions-mutations actions passwordReset calls Accounts.resetPassword, when that succeeds, clears error and resolves true" name="auth-actions-mutations actions passwordReset calls Accounts.resetPassword, when that succeeds, clears error and resolves true" time="0">
    </testcase>
    <testcase classname="auth-actions-mutations actions clearPasswordResetFailure clears any password reset failure" name="auth-actions-mutations actions clearPasswordResetFailure clears any password reset failure" time="0">
    </testcase>
    <testcase classname="auth-actions-mutations mutations SET_USER stores user in state.user" name="auth-actions-mutations mutations SET_USER stores user in state.user" time="0.001">
    </testcase>
    <testcase classname="auth-actions-mutations mutations LOGIN_FAILED stores login failure on state.loginError" name="auth-actions-mutations mutations LOGIN_FAILED stores login failure on state.loginError" time="0">
    </testcase>
    <testcase classname="auth-actions-mutations mutations CLEAR_LOGIN_FAILURE clears login error on state.loginError" name="auth-actions-mutations mutations CLEAR_LOGIN_FAILURE clears login error on state.loginError" time="0.001">
    </testcase>
    <testcase classname="auth-actions-mutations mutations REGISTER_FAILED stores register failure on state.registerError and sets  state.enrollAccountEmailSent to false" name="auth-actions-mutations mutations REGISTER_FAILED stores register failure on state.registerError and sets  state.enrollAccountEmailSent to false" time="0">
    </testcase>
    <testcase classname="auth-actions-mutations mutations CLEAR_REGISTER_FAILURE clears register error on state.registerError" name="auth-actions-mutations mutations CLEAR_REGISTER_FAILURE clears register error on state.registerError" time="0">
    </testcase>
    <testcase classname="auth-actions-mutations mutations PASSWORD_RESET_EMAIL_SENT sets state.passwordResetEmailSent to true" name="auth-actions-mutations mutations PASSWORD_RESET_EMAIL_SENT sets state.passwordResetEmailSent to true" time="0">
    </testcase>
    <testcase classname="auth-actions-mutations mutations PASSWORD_RESET_FAILED stores error in state.passwordResetError" name="auth-actions-mutations mutations PASSWORD_RESET_FAILED stores error in state.passwordResetError" time="0">
    </testcase>
    <testcase classname="auth-actions-mutations mutations CLEAR_PASSWORD_RESET_FAILURE clears error in state.passwordResetError" name="auth-actions-mutations mutations CLEAR_PASSWORD_RESET_FAILURE clears error in state.passwordResetError" time="0.001">
    </testcase>
    <testcase classname="auth-actions-mutations mutations ENROLL_ACCOUNT_EMAIL_SENT sets state.enrollAccountEmailSent to true" name="auth-actions-mutations mutations ENROLL_ACCOUNT_EMAIL_SENT sets state.enrollAccountEmailSent to true" time="0">
    </testcase>
    <testcase classname="auth-actions-mutations mutations ENROLL_ACCOUNT_FAILED stores error in state.enrollAccountError" name="auth-actions-mutations mutations ENROLL_ACCOUNT_FAILED stores error in state.enrollAccountError" time="0.001">
    </testcase>
    <testcase classname="auth-actions-mutations mutations CLEAR_ENROLL_ACCOUNT_FAILURE clears error in state.enrollAccountError" name="auth-actions-mutations mutations CLEAR_ENROLL_ACCOUNT_FAILURE clears error in state.enrollAccountError" time="0">
    </testcase>
  </testsuite>
  <testsuite name="AuthError" tests="6" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:15" time="4.77">
    <testcase classname="AuthError renders without crashing" name="AuthError renders without crashing" time="0.02">
    </testcase>
    <testcase classname="AuthError displays nothing if no error if none provided" name="AuthError displays nothing if no error if none provided" time="0.008">
    </testcase>
    <testcase classname="AuthError displays login error if present" name="AuthError displays login error if present" time="0.006">
    </testcase>
    <testcase classname="AuthError displays register error if present" name="AuthError displays register error if present" time="0.005">
    </testcase>
    <testcase classname="AuthError displays password reset error if present" name="AuthError displays password reset error if present" time="0.004">
    </testcase>
    <testcase classname="AuthError displays enroll account error if present" name="AuthError displays enroll account error if present" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="NavBarAuth" tests="3" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:15" time="5.127">
    <testcase classname="NavBarAuth renders without crashing" name="NavBarAuth renders without crashing" time="0.035">
    </testcase>
    <testcase classname="NavBarAuth displays sign in button when not signed in" name="NavBarAuth displays sign in button when not signed in" time="0.032">
    </testcase>
    <testcase classname="NavBarAuth displays sign out button when signed in" name="NavBarAuth displays sign out button when signed in" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="PasswordResetEmailForm" tests="7" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:14" time="5.36">
    <testcase classname="PasswordResetEmailForm renders without crashing" name="PasswordResetEmailForm renders without crashing" time="0.035">
    </testcase>
    <testcase classname="PasswordResetEmailForm submit button disables submit if email is empty" name="PasswordResetEmailForm submit button disables submit if email is empty" time="0.013">
    </testcase>
    <testcase classname="PasswordResetEmailForm submit button enables submit if email is not empty" name="PasswordResetEmailForm submit button enables submit if email is not empty" time="0.008">
    </testcase>
    <testcase classname="PasswordResetEmailForm calls actions.auth.sendPasswordResetEmail when submitted" name="PasswordResetEmailForm calls actions.auth.sendPasswordResetEmail when submitted" time="0.01">
    </testcase>
    <testcase classname="PasswordResetEmailForm sent success doesn&apos;t dislay sent message if not snet" name="PasswordResetEmailForm sent success doesn&apos;t dislay sent message if not snet" time="0.004">
    </testcase>
    <testcase classname="PasswordResetEmailForm sent success displays sent message if sent" name="PasswordResetEmailForm sent success displays sent message if sent" time="0.007">
    </testcase>
    <testcase classname="PasswordResetEmailForm clears password reset error when destroyed" name="PasswordResetEmailForm clears password reset error when destroyed" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="EnrollAccountForm" tests="7" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:15" time="4.901">
    <testcase classname="EnrollAccountForm renders without crashing" name="EnrollAccountForm renders without crashing" time="0.024">
    </testcase>
    <testcase classname="EnrollAccountForm enrolling doesn&apos;t display success message" name="EnrollAccountForm enrolling doesn&apos;t display success message" time="0.007">
    </testcase>
    <testcase classname="EnrollAccountForm enrolling disables submit button if both passwords not filled" name="EnrollAccountForm enrolling disables submit button if both passwords not filled" time="0.012">
    </testcase>
    <testcase classname="EnrollAccountForm enrolling enables submit button if both passwords filled and match" name="EnrollAccountForm enrolling enables submit button if both passwords filled and match" time="0.009">
    </testcase>
    <testcase classname="EnrollAccountForm enrolling calls actions.auth.enrollVerifyAccount on submit" name="EnrollAccountForm enrolling calls actions.auth.enrollVerifyAccount on submit" time="0.018">
    </testcase>
    <testcase classname="EnrollAccountForm enrolling clears enrollment error when destroyed" name="EnrollAccountForm enrolling clears enrollment error when destroyed" time="0.006">
    </testcase>
    <testcase classname="EnrollAccountForm enrolled success displays success message if url param present" name="EnrollAccountForm enrolled success displays success message if url param present" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="SignInBtn" tests="1" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:15" time="4.342">
    <testcase classname="SignInBtn renders without crashing" name="SignInBtn renders without crashing" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="SignUpBtn" tests="1" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:15" time="4.552">
    <testcase classname="SignUpBtn renders without crashing" name="SignUpBtn renders without crashing" time="0.023">
    </testcase>
  </testsuite>
  <testsuite name="client-index" tests="1" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:15" time="4.636">
    <testcase classname="client-index creates store and router" name="client-index creates store and router" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="SignInForm" tests="7" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:15" time="5.209">
    <testcase classname="SignInForm renders without crashing" name="SignInForm renders without crashing" time="0.044">
    </testcase>
    <testcase classname="SignInForm submit btn disables submit if username empty and password empty" name="SignInForm submit btn disables submit if username empty and password empty" time="0.037">
    </testcase>
    <testcase classname="SignInForm submit btn disables submit if username empty and password filled" name="SignInForm submit btn disables submit if username empty and password filled" time="0.012">
    </testcase>
    <testcase classname="SignInForm submit btn disables submit if username filled and password empty" name="SignInForm submit btn disables submit if username filled and password empty" time="0.014">
    </testcase>
    <testcase classname="SignInForm submit btn enables submit if username filled and password filled" name="SignInForm submit btn enables submit if username filled and password filled" time="0.023">
    </testcase>
    <testcase classname="SignInForm calls actions.auth.clearLoginFailure() when destroyed" name="SignInForm calls actions.auth.clearLoginFailure() when destroyed" time="0.011">
    </testcase>
    <testcase classname="SignInForm calls actions.auth.loginUser() when submitted" name="SignInForm calls actions.auth.loginUser() when submitted" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="PageHome" tests="1" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:16" time="4.343">
    <testcase classname="PageHome renders without crashing" name="PageHome renders without crashing" time="0.026">
    </testcase>
  </testsuite>
  <testsuite name="SignOutBtn" tests="2" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:15" time="4.531">
    <testcase classname="SignOutBtn renders without crashing" name="SignOutBtn renders without crashing" time="0.016">
    </testcase>
    <testcase classname="SignOutBtn calls actions.auth.logoutUser when clicked" name="SignOutBtn calls actions.auth.logoutUser when clicked" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="SignUpForm" tests="8" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:14" time="5.559">
    <testcase classname="SignUpForm renders without crashing" name="SignUpForm renders without crashing" time="0.033">
    </testcase>
    <testcase classname="SignUpForm submit btn disables submit if all inputs are empty" name="SignUpForm submit btn disables submit if all inputs are empty" time="0.034">
    </testcase>
    <testcase classname="SignUpForm submit btn disables submit if one input is empty" name="SignUpForm submit btn disables submit if one input is empty" time="0.015">
    </testcase>
    <testcase classname="SignUpForm submit btn enables submit if all inputs are filled" name="SignUpForm submit btn enables submit if all inputs are filled" time="0.019">
    </testcase>
    <testcase classname="SignUpForm calls actions.auth.registerUser when submitted " name="SignUpForm calls actions.auth.registerUser when submitted " time="0.021">
    </testcase>
    <testcase classname="SignUpForm calls actions.auth.clearRegisterFailure() when destroyed" name="SignUpForm calls actions.auth.clearRegisterFailure() when destroyed" time="0.025">
    </testcase>
    <testcase classname="SignUpForm success message displays success message if enroll email sent" name="SignUpForm success message displays success message if enroll email sent" time="0.009">
    </testcase>
    <testcase classname="SignUpForm success message doesn&apos;t display success message if enroll email sent" name="SignUpForm success message doesn&apos;t display success message if enroll email sent" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="PageSignUp" tests="1" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:16" time="4.43">
    <testcase classname="PageSignUp renders without crashing" name="PageSignUp renders without crashing" time="0.028">
    </testcase>
  </testsuite>
  <testsuite name="PasswordResetEmailForm" tests="7" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:15" time="4.793">
    <testcase classname="PasswordResetEmailForm renders without crashing" name="PasswordResetEmailForm renders without crashing" time="0.026">
    </testcase>
    <testcase classname="PasswordResetEmailForm submit button disables submit if one password empty" name="PasswordResetEmailForm submit button disables submit if one password empty" time="0.013">
    </testcase>
    <testcase classname="PasswordResetEmailForm submit button disables submit if both passwords filled but don&apos;t match" name="PasswordResetEmailForm submit button disables submit if both passwords filled but don&apos;t match" time="0.008">
    </testcase>
    <testcase classname="PasswordResetEmailForm submit button disables submit if both passwords filled and match but not strong enough" name="PasswordResetEmailForm submit button disables submit if both passwords filled and match but not strong enough" time="0.024">
    </testcase>
    <testcase classname="PasswordResetEmailForm submit button enables submit if both passwords filled, match, and are strong enough" name="PasswordResetEmailForm submit button enables submit if both passwords filled, match, and are strong enough" time="0.009">
    </testcase>
    <testcase classname="PasswordResetEmailForm submit action calls actions.auth.passwordReset when submitted" name="PasswordResetEmailForm submit action calls actions.auth.passwordReset when submitted" time="0.01">
    </testcase>
    <testcase classname="PasswordResetEmailForm clears password reset error when destroyed" name="PasswordResetEmailForm clears password reset error when destroyed" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="PageEnrollAccount" tests="1" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:15" time="4.604">
    <testcase classname="PageEnrollAccount renders without crashing" name="PageEnrollAccount renders without crashing" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="PageSignIn" tests="1" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:16" time="4.488">
    <testcase classname="PageSignIn renders without crashing" name="PageSignIn renders without crashing" time="0.036">
    </testcase>
  </testsuite>
  <testsuite name="PagePasswordReset" tests="1" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:15" time="4.608">
    <testcase classname="PagePasswordReset renders without crashing" name="PagePasswordReset renders without crashing" time="0.03">
    </testcase>
  </testsuite>
  <testsuite name="counter-actions-mutations" tests="6" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:15" time="4.89">
    <testcase classname="counter-actions-mutations actions increment commits INCREMENT with amount payload" name="counter-actions-mutations actions increment commits INCREMENT with amount payload" time="0.009">
    </testcase>
    <testcase classname="counter-actions-mutations actions decrement commits DECREMENT with amount payload" name="counter-actions-mutations actions decrement commits DECREMENT with amount payload" time="0.002">
    </testcase>
    <testcase classname="counter-actions-mutations actions resetDelayed commits RESET when complete" name="counter-actions-mutations actions resetDelayed commits RESET when complete" time="1.504">
    </testcase>
    <testcase classname="counter-actions-mutations mutations INCREMENT adds amount to state.count" name="counter-actions-mutations mutations INCREMENT adds amount to state.count" time="0">
    </testcase>
    <testcase classname="counter-actions-mutations mutations DECREMENT subtracts amount from state.count" name="counter-actions-mutations mutations DECREMENT subtracts amount from state.count" time="0.001">
    </testcase>
    <testcase classname="counter-actions-mutations mutations RESET sets state.count to 0" name="counter-actions-mutations mutations RESET sets state.count to 0" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Counter" tests="7" errors="0" failures="0" skipped="0" timestamp="2017-08-09T05:14:15" time="6.443">
    <testcase classname="Counter renders without crashing" name="Counter renders without crashing" time="0.031">
    </testcase>
    <testcase classname="Counter renders with count 0 initially" name="Counter renders with count 0 initially" time="0.007">
    </testcase>
    <testcase classname="Counter increment adds to count when Increment is clicked" name="Counter increment adds to count when Increment is clicked" time="0.017">
    </testcase>
    <testcase classname="Counter decrement subtracts from count when Decrement is clicked" name="Counter decrement subtracts from count when Decrement is clicked" time="0.01">
    </testcase>
    <testcase classname="Counter count plus ten displays count + 10 when incremented" name="Counter count plus ten displays count + 10 when incremented" time="0.013">
    </testcase>
    <testcase classname="Counter count plus ten displays count + 10 when decremented" name="Counter count plus ten displays count + 10 when decremented" time="0.007">
    </testcase>
    <testcase classname="Counter reset delayed resets count back to 0 after a 1500ms delay" name="Counter reset delayed resets count back to 0 after a 1500ms delay" time="1.514">
    </testcase>
  </testsuite>
</testsuites>
